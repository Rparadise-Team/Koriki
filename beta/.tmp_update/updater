#!/bin/sh

export SCREEN_WIDTH=640
export SCREEN_HEIGHT=480
export SDCARD_PATH=/mnt/SDCARD
export HOME=${SDCARD_PATH}
SETTINGS_INT_FILE="/appconfigs/system.json"
SETTINGS_EXT_FILE="/mnt/SDCARD/system.json"

export SYSTEM_PATH=${SDCARD_PATH}/Koriki
export CUSTOMER_DIR=/customer

export LD_LIBRARY_PATH=${SYSTEM_PATH}/lib:/usr/lib:$LD_LIBRARY_PATH
export PATH=${SYSTEM_PATH}/bin:/usr/bin:/usr/sbin:$PATH

export SWAPFILE=/mnt/SDCARD/cachefile


killprocess() {
   pid=`ps | grep $1 | grep -v grep | cut -d' ' -f3`
   kill -9 $pid
}

init_lcd() {
   cat /proc/ls
   if [ $1 -ne 0 ] ; then
	sleep $1
   fi 
}

runifnecessary() {
    a=`ps | grep $1 | grep -v grep`
    if [ "$a" == "" ] ; then
        $2 &
    fi
}

reset_settings() {
    if [ -f ${SDCARD_PATH}/.reset_settings ]; then
        if [ $MODEL = "MM" ]; then
            cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
            rm ${SDCARD_PATH}/.reset_settings
            sync
        else
            cp ${SYSTEM_PATH}/assets/system.mmp.json $SETTINGS_FILE/system.json
            rm ${SDCARD_PATH}/.reset_settings
            sync
            reboot
            sleep 10s
        fi
    fi
}

update() {
    if [ -f ${SDCARD_PATH}/update_koriki_*.zip ]; then
        for file in `ls ${SDCARD_PATH}/update_koriki_*.zip`; do
            unzip -q -o ${file} .update_splash.png -d ${SDCARD_PATH}
            sync
            ${SYSTEM_PATH}/bin/show ${SDCARD_PATH}/.update_splash.png

            unzip -q -o ${file} .deletes -d ${SDCARD_PATH}
            if [ -f ${SDCARD_PATH}/.deletes ]; then
                while read file_to_delete; do
                    if [ -f "${file_to_delete}" ]; then
                        rm "${file_to_delete}"
                    elif [ -d "${file_to_delete}" ]; then
                        rm -rf "${file_to_delete}"
                    fi
                done < ${SDCARD_PATH}/.deletes
            fi

            unzip -q -o ${file} -d ${SDCARD_PATH}

            rm ${file}
            sleep 5s
        done
    fi
    if [ -f ${SDCARD_PATH}/.deletes ]; then
        rm ${SDCARD_PATH}/.deletes
    fi
    if [ -f ${SDCARD_PATH}/.update_splash.png ]; then
        rm ${SDCARD_PATH}/.update_splash.png
    fi
    sync
}

dir_scaffolding() {
    ## Quake fbl's by @neilswann80
    pak="exec=pak0.pak"
    for dir2 in QUAKE/id1 QUAKE/hipnotic QUAKE/rogue QUAKE/dopa; do
        dir="/mnt/SDCARD/Roms/${dir2}"
        count=`ls -1 ${dir}/*.fbl 2>/dev/null | wc -l`
        if [ $count -eq 0 ] && [ -e "${dir}/pak0.pak" ]; then
            case ${dir2} in
                QUAKE/id1)      echo "$pak" > "${dir}/Quake.fbl" ;;
                QUAKE/hipnotic) echo "$pak" > "${dir}/Mission pack 1.fbl" ;;
                QUAKE/rogue)    echo "$pak" > "${dir}/Mission pack 2.fbl" ;;
                QUAKE/dopa)     echo "$pak" > "${dir}/Episode 5. Dimension of the Past.fbl" ;;
            esac
        fi
    done
}


# Detect flash type
if dmesg|fgrep -q "[FSP] Flash is detected (0x1100, 0x68, 0x40, 0x18) ver1.1"; then
    export SETTINGS_FILE=$SETTINGS_EXT_FILE
else
    export SETTINGS_FILE=$SETTINGS_INT_FILE
fi

# Detect model and init charger GPIO
if [ ! -f /customer/app/axp_test ]; then
    export MODEL="MM"
    if [ ! -f /sys/devices/gpiochip0/gpio/gpio59/direction ]; then
        echo 59 > /sys/class/gpio/export
        echo in > /sys/devices/gpiochip0/gpio/gpio59/direction
    fi
else
    export MODEL="MMP"
fi

# Reset settings on first boot
reset_settings

# Init_lcd
init_lcd 1

# Init backlight
echo 0 > /sys/class/pwm/pwmchip0/export
echo 800 > /sys/class/pwm/pwmchip0/pwm0/period
echo 70 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle
echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable

# Charging screen
${SYSTEM_PATH}/bin/charging

# Update opportunity
update

# Show bootScreen
${SYSTEM_PATH}/bin/show ${SDCARD_PATH}/Koriki/images/bootScreen.png

# Create ROMs scaffolding
dir_scaffolding

# Enable swap
if [ ! -f ${SWAPFILE} ]; then
    dd if=/dev/zero of=${SWAPFILE} bs=1M count=128
    mkswap ${SWAPFILE}
fi
swapon ${SWAPFILE}

# Koriki keymon
runifnecessary "keymon" ${SYSTEM_PATH}/bin/keymon

# Detect 'B' press to fix SM boot loops
if cat /sys/kernel/debug/gpio|grep "gpio-6 "|grep lo > /dev/null 2>&1
then
    rm ${SDCARD_PATH}/.simplemenu/last_state.sav
fi

# Latency reduction audioserver by Eggs
# NOTE: could cause performance issues on more demanding cores...maybe?
runsvr=`/customer/app/jsonval audiofix`
if [ "$runsvr" != "0" ] ; then
    if [ -f /customer/lib/libpadsp.so ]; then
	if [ ! -f /customer/app/axp_test ]; then
    export MODEL="MM"
		LD_PRELOAD=/mnt/SDCARD/Koriki/lib/as_preload.so /mnt/SDCARD/Koriki/bin/audioserver.min > /dev/null 2>&1 &
        export LD_PRELOAD=libpadsp.so
	else
	export MODEL="MMP"
		LD_PRELOAD=/mnt/SDCARD/Koriki/lib/as_preload.so /mnt/SDCARD/Koriki/bin/audioserver.plu > /dev/null 2>&1 &
        export LD_PRELOAD=libpadsp.so
	fi
    fi
fi

# Launch SimpleMenu
while [ 1 ]; do
    HOME=${SDCARD_PATH}
    cd ${SDCARD_PATH}/.simplemenu
    ./simplemenu
    sleep 4s
done

reboot
