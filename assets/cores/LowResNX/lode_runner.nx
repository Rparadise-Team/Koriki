REM LODE RUNNER BY CCLX33 V1.0

DIM GLOBAL MAP(19,16)

GLOBAL MANX,MANY,STONE,WALL,LADDER,BAR1,GOLD,SKYLADDER,MAN,FAKEWALL,MANLADDER,MANBAR,TRAP

DIM DIGX(30), DIGY(30), TIM(30), LVL$(300)
DIM robotx(5), roboty(5), robotdir(5), robotfall(5), robottrap(5), takegold(5)

LEVEL=1

REM CONST
WALL=1
STONE=2
LADDER=3
BAR1=4
FAKEWALL=5
SKYLADDER=6
GOLD=7
ROBOT=8
MAN=9
MANLADDER=10
MANBAR=11
TRAP=16
MAPW=18
MAPH=15
ROBOTFALLTIME=13
DIGTIME=500
TRAPTIME=300

GAMEPAD 1

GOSUB READLEVEL

PAUSE OFF
GOTO RESTART



RESTART:

IF LEVEL<1 THEN LEVEL=1
IF LEVEL>MAXLEVEL THEN LEVEL=MAXLEVEL
GOSUB DRAWLEVEL
DIR=0

WAIT 20


' main loop
do

A0=MAP(MANX,MANY)
IF PAUSE THEN GOTO SELECT

XA=0
YA=0
if falling=0 then
  IF LEFT TAP(0) AND MANX>1 THEN
    XA=-1
  ELSE IF RIGHT TAP(0) AND MANX<MAPW THEN
    XA=1
  ELSE IF UP TAP(0) AND A0=LADDER AND MANY>1 THEN
    YA=-1
  ELSE IF DOWN TAP(0) AND MANY<MAPH THEN
    YA=1
  END IF
  IF XA<>0 OR YA<>0 THEN GOSUB GO
  DIGA=0
  IF BUTTON TAP(0,0) AND MANX>1 THEN DIGA=-1
  IF BUTTON TAP(0,1) AND MANX<MAPW THEN DIGA=1
  IF MANY<MAPH AND DIGA<>0 THEN GOSUB DIG
end if

if falling>0 then
  FALLING=FALLING-1
  wait 1
  IF FALLING=0 THEN GOSUB FALL
end if

IF TEMPFREEWALK>0 THEN
  TEMPFREEWALK=TEMPFREEWALK-1
  IF TEMPFREEWALK=0 THEN FALLING=3
END IF
gosub checkfall
GOSUB checktime
GOSUB ROBOTWALK
IF DEAD>0 THEN GOTO DEAD

IF FALLING>1 THEN
  FALLING=FALLING-1
  IF FALLING=0 THEN GOSUB FALL
END IF
IF ROBOTN>0 THEN GOSUB CHECKROBOTFALL
IF FINISH=1 THEN GOTO WIN
WAIT 1

loop



SELECT:

PAUSE OFF
LOCATE 0,0
INPUT"LEVEL=";A$
IF A$="N" THEN
  LEVEL=LEVEL+1
ELSE IF A$>"" THEN
  LEVEL=VAL(A$)
END IF
KEYBOARD OFF
GOTO RESTART



WIN:

TEXT 8,8," GOOD "
LEVEL=LEVEL+1
WAIT 60
play 1,50,3
play 1,60,3
GOTO RESTART



dead:

TEXT 8,8," YOU DEAD "
WAIT 60
GOTO RESTART



DIG:

IF DIGA=1 THEN DIR=1 ELSE DIR=0
X1=MANX+DIGA
Y1=MANY+1
VDIG=MAP(X1,Y1)
VUP=MAP(X1,MANY)
IF VDIG<>WALL OR (VUP<>0 AND VUP<>SKYLADDER AND VUP<>TRAP) THEN RETURN
DIGN=DIGN+1
IF DIGN>30 THEN DIGN=1
DIGX(DIGN)=X1
DIGY(DIGN)=Y1
TIM(DIGN)=DIGTIME
CALL DRAW(X1,Y1,0)
MAP(X1,Y1)=TRAP
play 1,40,3
RETURN



checkfall:

falling=0
a0=map(manx,many)
if a0=bar1 or a0=ladder then return
ad=map(manx,many+1)
if ad=0 or ad=gold or ad=bar1 or ad=skyladder or ad=fakewall or ad=trap then falling=1
return



CHECKROBOTFALL:

FOR I=1 TO ROBOTN
  IF robotfall(I)>0 THEN
    robotfall(I)=robotfall(I)-1
    IF robotfall(I)=0 THEN GOSUB ROBOTFALL
  end if
NEXT I
RETURN



DRAWMAN:

 MANPIC=MAN
 behind=MAP(MANX,MANY)
 IF behind=BAR1 THEN MANPIC=MANBAR
 IF behind=LADDER THEN MANPIC=MANLADDER
 ATTR(,DIR)
 CALL DRAW(MANX,MANY,MANPIC)
 ATTR(,0)
RETURN



SUB DRAWset(X,Y,a)

  CALL DRAW(X,Y,a)
  MAP(X,Y)=a
END SUB



SUB DRAWset2(X,Y,p,v)

  CALL DRAW(X,Y,p)
  MAP(X,Y)=v
END SUB



SUB DRAW(X,Y,A)

  IF A=1 OR A=2 OR A=5 THEN ATTR(1,)
  IF A>7 THEN ATTR(3,)
  IF A=7 THEN ATTR(2,)
  CELL X,Y,A
  ATTR(0,)
END  SUB



GO:

 IF XA=1 THEN DIR=1 ELSE DIR=0
 X1=MANX+XA
 Y1=MANY+YA
 A1=MAP(X1,Y1)

 ' only down can into fakewall
 IF YA<=0 AND A1=FAKEWALL THEN RETURN
 IF A1=WALL OR A1=STONE THEN RETURN

 IF A1=GOLD THEN gosub getgold

 IF (A1>=ROBOT AND A1<>TRAP) THEN DEAD=3

 CALL DRAW(MANX,MANY,A0)
 MANX=X1
 MANY=Y1
 GOSUB DRAWMAN

 IF MANY=1 AND GOLDN=0 THEN FINISH=1

 IF A1=BAR1 OR A1=LADDER THEN RETURN



FALL:

 FALLING=0
' at bottom
 IF MANY=MAPH THEN RETURN

' at ladder or bar
 A0=MAP(MANX,MANY)
 IF A0=BAR1 OR A0=LADDER THEN RETURN

' on stone, wall, ladder or robot
 Y1=MANY+1
 A1=MAP(MANX,Y1)
 IF A1=STONE OR A1=WALL OR A1=LADDER OR (A1>=ROBOT AND A1<>TRAP) THEN RETURN

 x1=manx
 IF A1=GOLD THEN gosub getgold

'draw
 CALL DRAW(MANX,MANY,A0)
 MANY=Y1
 GOSUB DRAWMAN
 play 1,30,1

' now not at bar
 IF A1<>BAR1 THEN FALLING=8
RETURN



getgold:

MAP(x1,Y1)=0
GOLDN=GOLDN-1
play 1,50,3
IF GOLDN=0 THEN goto CHAGELADDER
return



CHAGELADDER:

FOR J=1 TO MAPH
  FOR I=1 TO MAPW
    v=MAP(I,J)
    IF v=SKYLADDER or v=robot+SKYLADDER THEN
      MAP(I,J)=v-3
      if not (i=manx and j=many) then CALL DRAW(I,J,LADDER)
    END IF
  NEXT I
NEXT J
RETURN



checktime:

' trap to wall
FOR I=1 TO 30
  if tim(i)>0 then
    TIM(I)=TIM(I)-1
    IF TIM(I)=0 THEN
      dx=DIGX(I)
      dy=DIGY(I)
      d0=MAP(dx,dy)
      CALL DRAWset(dx,dy,wall)
      IF dx=MANX AND dy=MANY THEN DEAD=1
      IF d0>=ROBOT AND d0<>TRAP THEN GOSUB burryrobot
    end if
  END IF
NEXT I

 ' robot in trap
IF ROBOTN=0 THEN RETURN
FOR I=1 TO ROBOTN
  IF robottrap(I)>0 THEN
    robottrap(I)=robottrap(I)-1
    IF robottrap(I)=0 THEN GOSUB OUTTRAP
  END IF
NEXT I
RETURN



burryrobot:

FOR J=1 TO ROBOTN
  IF dx=robotx(J) AND dy=roboty(J) THEN DN=J
NEXT J

robottrap(DN)=0
robotfall(DN)=140
if takegold(dn)=1 then GOLDN=GOLDN-1

' gen robot
FOR IY=1 TO MAPH
  FOR IX=1 TO MAPW
    IF MAP(IX,IY)=0 THEN
      robotx(DN)=IX
      roboty(DN)=IY
      CALL drawset(IX,IY,ROBOT)
      IX=MAPW
      IY=MAPH
    END IF
  NEXT IX
NEXT IY
RETURN



OUTTRAP:

RX=robotx(I)
RY=roboty(I)
r0=MAP(RX,RY)
ru=MAP(RX,RY-1)
IF ru=0 OR ru=SKYLADDER or ru=gold THEN
  CALL DRAWset2(RX,RY,0,trap)
  RY=RY-1
  roboty(I)=RY
  CALL DRAWset2(RX,RY,ROBOT,ru+ROBOT)
  if manx>rx then
    IF MAP(RX+1,RY)=0 THEN robotdir(I)=3 ELSE IF MAP(RX-1,RY)=0 THEN robotdir(I)=2
  else
    IF MAP(RX-1,RY)=0 THEN robotdir(I)=2 ELSE IF MAP(RX+1,RY)=0 THEN robotdir(I)=3
  end if
  GOTO TRYGO
END IF
RETURN



ROBOTFALL:

RX=robotx(I)
RY=roboty(I)
r0=MAP(RX,RY)
'if rx=manx and ry=many+1 then TEMPFREEWALK=10
IF r0=BAR1 OR r0=ROBOT+LADDER THEN GOTO ENDROBOTFALL
IF RY=MAPH THEN GOTO ENDROBOTFALL

r1=MAP(RX,RY+1)

IF r1=STONE OR r1=WALL OR r1=LADDER OR (r1>=ROBOT AND r1<>TRAP) THEN GOTO ENDROBOTFALL

robotfall(I)=13
CALL DRAWset(RX,RY,r0-ROBOT)
CALL DRAWset2(RX, RY+1, ROBOT, r1+ROBOT)
roboty(I)=RY+1
IF RX=MANX AND RY+1=MANY THEN DEAD=1

' fall into trap
IF r1=TRAP THEN
  robottrap(I)=TRAPTIME
  if takegold(i)=1 then
    if r0=robot then
      call drawset(rx,ry,gold)
      takegold(i)=0
    end if
  end if
  GOTO ENDROBOTFALL
END IF
RETURN



ENDROBOTFALL:

robotfall(I)=0
robotdir(I)=0
RETURN



ROBOTWALK:

' no robot
IF ROBOTN=0 THEN RETURN

'delay
ROBOTwait=ROBOTwait+1
IF ROBOTwait<15 THEN RETURN

FOR I=1 TO ROBOTN
  RX=robotx(I)
  RY=roboty(I)
  IF robotfall(I)=0 AND robottrap(I)=0 THEN
    IF robotdir(I)=0 THEN GOSUB CHECKDIR
    GOSUB TRYGO
  end if
NEXT I

ROBOTwait=0
RETURN



CHECKDIR:

REM 1 UP 2 LEFT 3 RIGHT 4 DOWN
IF RY<MANY THEN
  IF MAP(RX,RY+1)=LADDER THEN 
    robotdir(I)=4
    RETURN
  else
    goto findhole
  END IF
else IF RY>MANY THEN
  if MAP(RX,RY)=ladder+robot then 
    robotdir(I)=1
    RETURN
  else
    goto findladder
  END IF
else
  IF RX>MANX THEN robotdir(I)=2
  IF RX<MANX THEN robotdir(I)=3
end if
RETURN



findladder:

try1=1
rstop=0
lstop=0
for j=1 to 18
  x1=rx+j
  if x1>mapw then rstop=1
  if rstop=0 then
    ar=map(x1,ry)
    if ar=wall or ar=stone then rstop=1
    if ar=ladder then
      robotdir(I)=3
      lstop=1
      j=18
    end if
  end if
  xL=rx-j
  if xL<1 then lstop=1
  if lstop=0 then
    al=map(xL,ry)
    if al=wall or al=stone then lstop=1
    if al=ladder then
      robotdir(I)=2
      rstop=1
      j=18
    end if
  end if
  if rstop=1 and lstop=1 then j=18
next j
if rstop=1 and lstop=1 then goto findhole
return



findhole:

if ry=maph then return
rstop=0
lstop=0
for j=1 to 18
  x1=rx+j
  if x1>mapw then rstop=1
  if rstop=0 then
    ar=map(x1,ry)
    if ar=wall or ar=stone then
      rstop=1
    else
      ard=map(x1,ry+1)
      if ard=ladder or ard=0 or ard=fakewall then
        robotdir(I)=3
        lstop=1
        j=18
      end if
    end if
  end if
  xl=rx-j
  if x1<1 then lstop=1
  if lstop=0 then
    al=map(x1,ry)
    if al=wall or al=stone then
      lstop=1
    else
      ald=map(x1,ry+1)
      if ald=ladder or ald=0 or ald=fakewall then
        robotdir(I)=2
        rstop=1
        j=18
      end if
    end if
  end if
  if rstop=1 and lstop=1 then j=18
next j  
if rstop=1 and lstop=1 and try1=0 then goto findladder
try1=0
return



TRYGO:

XA=0
YA=0
IF robotdir(I)=1 THEN YA=-1
IF robotdir(I)=4 THEN YA=1
IF robotdir(I)=2 THEN XA=-1
IF robotdir(I)=3 THEN XA=1
X1=RX+XA
Y1=RY+YA
r0=MAP(RX,RY)

IF X1<1 OR Y1<1 OR X1>MAPW OR Y1>MAPH THEN GOTO TRYFAIL
IF ya<0 AND r0<>LADDER+ROBOT THEN GOTO TRYFAIL

r1=MAP(X1,Y1)
IF r1=WALL OR r1=STONE OR (r1=FAKEWALL and ya<=0) OR (r1>=ROBOT and r1<>trap) THEN GOTO TRYFAIL

if r1=gold and takegold(i)=0 then
  r1=0
  takegold(i)=1
end if

CALL DRAWset(RX,RY,r0-ROBOT)
robotx(I)=X1
roboty(I)=Y1
CALL DRAWset2(X1,Y1,ROBOT,r1+robot)

IF X1=MANX AND Y1=MANY THEN
  DEAD=2
  return
end if

' turn up or down
IF YA=0 THEN
  BELOW=MAP(X1,Y1+1)
  IF Y1<MANY AND (below=0 or BELOW=LADDER or BELOW=fakewall or below=gold OR BELOW=SKYLADDER) THEN robotdir(I)=4
  IF Y1>MANY AND r1=LADDER THEN robotdir(I)=1
END IF

' turn left or right
IF XA=0 AND Y1=MANY THEN
  IF MANX>X1 then
    rr=MAP(X1+1,Y1)
    if rr=0 or rr=gold or rr=skyladder then robotdir(I)=3
  else IF MANX<X1 then
    rl=MAP(X1-1,Y1)
    if rl=0 or rl=gold or rl=skyladder then robotdir(I)=2
  end if
END IF

' NEED NOT FALL
IF Y1=MAPH OR r1=LADDER OR r1=BAR1 THEN RETURN

BELOW=MAP(X1,Y1+1)
IF BELOW=0 OR below=bar1 or BELOW=GOLD OR BELOW=FAKEWALL OR BELOW=TRAP OR BELOW=SKYLADDER THEN robotfall(I)=13
RETURN



TRYFAIL:

if robotdir(I)=0 then
  robotdir(I)=int(rnd*4)+1
end if
if xa<>0 then
  if rnd>0.8 then
    robotdir(I)=5-robotdir(I)
  else
    robotdir(I)=int(rnd*4)+1
  end if
else
  robotdir(I)=int(rnd*2)+2
end if
RETURN



DRAWLEVEL:

CLS
PRINT "LEVEL=";LEVEL
GOLDN=0
FINISH=0
DEAD=0
DIGN=0
try1=0
ROBOTN=0
FALLING=0
TEMPFREEWALK=0
FOR I=1 TO 30
  TIM(I)=0
NEXT I
I=1
L$=LVL$(LEVEL)
FOR Y=1 TO MAPH
  FOR X=1 TO MAPW
    B$=MID$(L$,I,1)
    V=VAL(B$)
    MAP(X,Y)=V
    IF V=GOLD THEN GOLDN=GOLDN+1
    CALL DRAW(X,Y,V)
    IF V=MAN THEN
      MANX=X
      MANY=Y
      MAP(X,Y)=0
    END IF
    IF V=ROBOT THEN
      ROBOTN=ROBOTN+1
      robotx(ROBOTN)=X
      roboty(ROBOTN)=Y
      robotdir(ROBOTN)=0
      robottrap(ROBOTN)=0
      takegold(ROBOTN)=0
      robotfall(ROBOTN)=1
      ROBOTwait=0
    END IF

    IF B$<>"\" AND B$<>"#" THEN I=I+1
  NEXT X
  IF B$<>"#" THEN I=I+1
NEXT Y



BORDER:

FOR Y=1 TO MAPH
  CALL DRAW(0,Y,2)
  CALL DRAW(MAPW+1,Y,2)
NEXT Y
FOR X=0 TO MAPW+1
  MAP(X,MAPH+1)=STONE
NEXT X
RETURN



READLEVEL:

MAXLEVEL=300
FOR I=1 TO 300
  READ LVL$(I)
  IF LVL$(I)="" THEN
    MAXLEVEL=I-1
    I=300
  END IF
NEXT I
RETURN



rem data

DATA "6\6\644444009000000\670013100000000\111113111117013\411113111111113\010013111011113\000013111011013\137013111011013\111113111701013\011113111111013\000003000000003\312121212121213\311111100111113\311111110011113\#"
DATA "600080000000000020\322222022222223220\300000004440003201\113110110031803011\003001171030103110\310001111530013443\300009000030001003\311111111010710073\311111111510100113\311111111510000073\311700011514444311\311000711513000100\311111111513001111\300011700003011000\111111111111111111#"
DATA "6\6\111130000311111510\000130000310000010\000130000310000010\700137013111117710\115111113000015111\000007013087000040\000031111111111103\000031000000000703\000031070031303111\071311110031115100\111300010731000000\001300011151000000\000300000090000000\#"
DATA "000007444400044444\000031100111110000\007030000000710010\011130070900110011\000031111130010800\100031000130014443\008031700130010003\311111111131110003\317010700100010003\311111111100010003\344477277170011223\300111211111310003\300007000000330083\311111111111131111\#"
DATA "700087244444470440\111311200000711003\000300200007110033\700307200071100331\111311200711003311\009300207110003313\111307271100033133\111311211000331137\171300207003380337\111307211111111113\711311244444444443\111307270700300000\122222211100301111\000000000008311771\11111111111111111#"
REM -----LEVEL 6-------
DATA "000600000000000030\000344444444444430\000300000000008030\000322222211221122\122314444415111001\700310300014401001\111310317717131701\444310311115131001\000310370004433311\111311111130700300\009300000031100333\111311070131744003\170371111131170113\111111111130011111\#"
DATA "300440000004444444\300060000073000000\111011111113444443\070000000003000003\222311100003444443\000307011111000003\090301111171444443\318344444444444443\311111115111110060\370011110000017061\311111111111112261\321011111111110060\321011111111113117\320711111111113100\301111111700003111\#"
DATA "30090010004040000\34444011110301111\00000311110305111\04444310110305001\30000010110305771\34444010110305111\00000310110305771\00800310110305111\31111117710305771\30000011110305111\30000000008305771\11311111111115111\11311111700000000\11311707113000007\00300111111111111\#"
DATA "04900600000400000\30300600003030003\00030600030003003\17103600301710343\11103444301310003\12112115112315113\07111007101305003\31444434444341443\31001035301007003\31121125321121513\31100015311000513\31440445314404413\31007001300070013\31002001310020013\30112110301121503\#"
DATA "100000900006\111111111113\101111111013\101111111013\101411141013\101411141013\101410141013\101410141013\101410141013\101410141013\171717171713\151111111113\000000000003\111111111111\#"
REM -----LEVEL 11-------
DATA "34440011110007\30071171110073\30711117110730\37111111710370\31111111110730\30447717710370\37001171170730\93007117110370\01301171170730\81307117110370\01301171170730\01307117110130\07301171171030\01300111110030\00344401111100\#"
DATA "93447110000000\30071173111111\30411730000011\30410300000001\30413000000007\30413100000003\30413173173173\30413222222222\30413000000000\30411111131111\30411700131007\30400108131001\30011011131111\00001333331110\00000000000000\#"
DATA "\3900113000110113\3111413111410113\3111413171410113\3111413154010113\3000413000111113\3151413111101013\3111413111101013\3111413111170013\3171403107111013\1511511151111113\4444444444440003\0006600006600003\0006000006000003\0006000060000603\#"
DATA "0000044\1301170230022003\1222210023000832\7000012223122212\5032000003104400\5230221221207021\0223004000221222\0022300217200000\4402230021000022\7030223000000000\0130002300312344\0132110231210308\2107112032711221\2221110312211071\2700132300912222\#"
DATA "\00908010000800043\11110011111111103\11110011171171103\07110017111117103\00000011171111703\11000017111171103\11220011171711103\77133017111117103\13330111171111703\00001117111171103\31011111111111103\30101110000000003\01110100000000003\111110111111111111#"
REM -----LEVEL 16-------
DATA "9\1001000440440443\0701001071001703\1111111101131113\1001070001731003\1000031444431003\1111111111111113\1071000701731003\0001001300331703\1111111111111113\1001000031001003\1000731001001003\1311111111111113\0371001700001003\1300000061000073\#"
DATA "6\6\6111380070090076\3000311111111013\3011310007000013\3071310111113013\3011310100003013\3000330101113013\3111131171113013\1000000101113003\1011110100003133\1017110111111130\1000100117000031\1511115111111131\0000800000000030\#"
DATA "000090000008000\311111131111113\310070131070013\320000131000723\311011531110113\301052222210103\301110000011103\300000777000003\311111111111113\600073333370000\605515555515500\600000000000008\600000000000003\377777777777731\111111111111111111#"
DATA "060040000000000000\260300130000000000\032312222112311123\322230402070231123\327003707230433123\322303032230022323\372303027030072323\327343223030732323\372302703030530323\327322303030272323\322270303030757323\372230303030322203\227030303030320013\203030303030301323\023232323232222093\#"
DATA "002444444445\230300000003\230020002003\234470007423\230020742003\234470207423\230024702003\234470207423\230020742003\234470207423\030024702003\134470207423\230020002003\932600008803\322211112212\#"
REM -----LEVEL 21-------
DATA "90600800000044444\00611111111100300\00663434343013331\00143434343413031\00143730373413331\00011111111103330\00000000000003030\00000000000003330\00000000000003330\31044444700003030\32704440100003334\31217401312121310\30012121300080300\23000000210121313\12123713000000703\#"
DATA "11000311100000600\00011300001611111\00000300101111100\61611111100000000\61110000111111100\60000000000000001\11116116009001111\00000003111100000\03110003000701111\13000111031110000\03007000030000070\01111113110111110\07000803000007000\11101111113011100\00000000003000000\#"
DATA "000030000111111160\003111110000000160\003100011111390106\313111010001300111\310001010001300010\310071010131111111\310111110130000001\310101010111001311\311111011103111110\300100000173010111\300100111111010108\131113108101010100\130013107111110100\130013111111000111\111113000000000000\#"
DATA "00000000000000009\13131111111311111\03013100000301310\13113110131111311\30603000003000300\13003100113001310\03003004013001110\31013117131300000\31001314310341310\30000311118110301\30401314001001300\30010311110310303\30031344411013003\13030030000131010\01113403444434441\#"
DATA "190100107000103\100170003107143\111113111111183\100173100170103\170103170000143\110113111111130\107103107130130\100073100170130\111113111111130\144103144100130\144103144108130\111111111111130\130100000100060\138000107003100\111111111111111111#"
REM -----LEVEL 26-------
DATA "\39004444444444\30003000000000\30063011111110\30603071117110\36003017111170\00003071117110\00003017111170\00003071117110\00003017111170\000030000000082\00003111111111\00003100310071\00003111111111\00003100013071\#"
DATA "220220026009006220\202020020603060202\200020020063600200\111115111213111111\340000000003040040\300711111713173103\307711111713122155\377711111713070000\317111111713522151\300221752223207551\113227772223131112\103277777223270000\131111111113111111\130707070703011111\111111111111211111\#"
DATA "90062200200222220\30602020200222000\36002002200222220\31111111111081100\30400407477131113\31731031031130013\31221551315171113\30700002207000703\35221511111122113\32075510712072223\31311121111111113\32700000007000713\32222220111112213\30111113170000073\120111138131611111#"
DATA "070000000000000006\511131111300070006\511131111111111111\000030070800000111\311111111131111111\300011111131111177\300011111131111111\300010000730000700\300011131111111311\300711130000000311\311510030000900300\311513111113111111\311513111113111111\380003117113000070\111111111111111111#"
DATA "131101131101131101\030101030101030101\313070313070313070\101131101131191131\101030101030101030\070313070313070313\131101131101131101\030101030101030101\313070313070313070\101131101131101131\101030101030101030\870313070313070313\131101131101131101\030101030101030101\313070313070313070\#"
REM -----LEVEL 31-------
DATA "000000000000777444\113204032043222220\003223222252222444\313003700700702022\111111134134132442\000000044444437708\212121200000011113\007970001111311113\212321210444300003\000300003000111131\111111113170000030\000444003010031111\113000111301030008\003000711130111317\113000111113070317\#"
DATA "\000034440226622000\000300001006600100\003000001111111100\030700001112211100\030000701212212100\003000001072270100\000300001211112100\000030000000000000\000030000444444000\000300003100001300\003070003222222300\030000003000000300\830000003709007380\111111111111111111\#"
DATA "\133733373333373337\133333333333333333\131113111353111311\138343441353134344\115351531353135153\130344433757333443\131155311515113551\134444317000713444\135555311151113555\131044344444443440\131311311555113113\130344344454443443\131313115313511313\130313000393700313\#"
DATA "00000040004\600003040304031111\600003004300430444\311111001100110111\300072000007707200\300002211111102244\311111100700000701\311111100111111101\321222200000000000\317110013111111121\315111113111111122\310117113111111122\304440003111111172\300870311111711112\3900003#"
DATA "07000001108003737\31300000000433333\17134033344003333\05000333300303337\03000333300303333\00000333730003733\00000033333003333\00700733333333333\00000333333733733\00000033333333330\00003333333393330\00030003333333333\00037334344443333\00000000000000337\11111111111111033\#"
REM -----LEVEL 36-------
DATA "6\600000000070444490\311111111110300000\380000000000300070\111111111130300711\000000000030307110\311111111110301100\300000000000300000\111111111130300000\000000000030300000\311111111110300000\300000000000300071\111111111130300011\700000000030300010\111111111111111111#"
DATA "800000000000020444\222222007000064446\000002222220060000\000043004320760022\000403040322260020\111003400300062220\111002000300060000\171070700300760000\151000000322260000\000000000300060000\000000000300767000\311111111111161111\300000000000060000\390000000000060000\111111111111111111\#"
DATA "800044440000903010\000000003111113011\000000013111123111\000110113111123311\001701113111120311\001171113111723111\000151113111123111\000001113111123711\000000173111123200\000000223000033200\044402223000032200\100032203000032200\010030223300033220\701030022300003222\000130003300003000\#"
DATA "\904040404000000006\317171717130000006\311111111131111111\307171717030080000\311151511131111111\317171717130000000\311151511131111111\307171717030000000\311151511131111111\317171717130000000\311151511131111111\307171717030000000\311151511131111111\307000007030000000\#"
DATA "9\22322232222222223\23303230303030383\23222222322232222\23322237323030323\32303222222222323\32223730303037302\30373223111112232\32222303030303030\30302222222223222\22230302030303230\030323722322222326\222222230303030326\030302232222222276\22223223030323222\#"




DATA ""


#1:MAIN PALETTES
053F2F0000393400003C3824003F3802
003F2A15003F2A15003F2A15003F2A15

#2:MAIN CHARACTERS
00000000000000000000000000000000
FF6060FFFF0606FF20BFBFFF02FBFBFF
FF818181818181FF80FEFEFEFEFEFEFF
8181FF818181FF810000000000000000
FF000000000000000000000000000000
FF6060FFFF0606FF20BFBFFF02FBFBFF
00000000000000000000000000000000
00001018183C3C7E0000002020404080
3E3E3E009C6000763E0E3E1CBE7E3E76
3E0616001C362E763E3E3E3C00081076
BDBDFF19BCBDFFA53C3C3C8043003C24
7E3C3C7E7E7E3C2481BDBDBD00003C24


