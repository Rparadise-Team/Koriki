'THE PROGRAM IS STORED IN THE ROM WITH ONE BYTE BEING ONE COMMAND (NEED HELP FINDING BETTER SYSTEM)
'THE FIRST BYTE IS DEDICATED TO THE DELAY BETWEN COMMANDS IN FRAMES
'AFTER THAT EACH BYTE IS A COMMAND RANGING FROM 0 - 8
'____________________________________________________________________________
'|# | CMD |WHAT IT DOES.                                                     |
'|--|-----|----------------------------------------------------------------- |
'|0 |     |DO NOTHING (NEEDED BECAUSE EACH ROW OF ROM NEEDS TO HAVE 16 BYTES)|
'|1 |  >  |MOVE DATA POINTER FORWARD                                         |
'|2 |  <  |MOVE DATA POINTER BACK                                            |
'|3 |  +  |ADDS 1 TO THE CURRENT BYTE                                        |
'|4 |  -  |SUBSTRACTS 1 FROM THE CURRENT BYTE                                |
'|5 |  ,  |ASKS FOR USER INPUT AND SAVES IT TO SELECTED BYTE                 |
'|6 |  .  |OUTPUTS THE CURRENT BYTE AS A NUMBER (ASCII COMING SOON)          |
'|7 |  [  |JUMPS TO RESPECTIVE ] IF BYTE IS 0                                |
'|8 |  ]  |JUMPS TO RESPECTIVE [ IF BYTE IS NOT 0                            |
'----------------------------------------------------------------------------
'MEMORY TAPE IS STORED IN "PERSISTENT RAM" AND IS RESET AFTER PROGRAM
'WHEN RUNNING FROM DISK THE PROGRAM IS STORED IN THE WORKING RAM

TOUCHSCREEN
FILES
WINDOW 2,3,16,9,0
FONT 128
SPRITE 0 PAL 7
SPRITE 1 SIZE 1
SPRITE 2 SIZE 1
GLOBAL COMMAND, CODE$, DELAY, MODE, FILEOFFSET, CHOSENFILE, CODEOFFSET, CURSOR, MAXOFFSET
CHOSENFILE = 5
DIM CHARS$(8)
CHARS$(0) = ">"
CHARS$(1) = "<"
CHARS$(2) = "+"
CHARS$(3) = "-"
CHARS$(4) = ","
CHARS$(5) = "."
CHARS$(6) = "["
CHARS$(7) = "]"

MAIN:
BG SOURCE ROM(3)
BG COPY 0,0,20,16 TO 0,0
PAL 7
TEXT 3,0,"BRAINF*CK  IDE"
TEXT 11,14, "DELAY"
CURSOR = LEN(CODE$)
CALL CALCOFFSET
CODEOFFSET = MAXOFFSET
CALL LOCATECURSOR
IF MODE = 0 THEN
  BG TINT 0,2 TO 1,2 PAL 7
  BG TINT 0,3 TO 1,3 PAL 4
ELSE
  BG TINT 0,2 TO 1,2 PAL 4
  BG TINT 0,3 TO 1,3 PAL 7
END IF
DO
  PAL 7
  NUMBER 12,15,DELAY,3
  
  IF TAP THEN
    IF TOUCH.Y > 96 AND TOUCH.X > 15 AND TOUCH.X < 144 THEN
      IF TOUCH.Y < 112 THEN
        C = TOUCH.X - 16
        C = C / 16
        CODE$ = LEFT$(CODE$,CURSOR) + CHARS$(C) + RIGHT$(CODE$,LEN(CODE$) - CURSOR)
        CALL CALCOFFSET
        INC CURSOR
        CALL ADJUSTOFFSET
        CALL LOCATECURSOR
      ELSE
        IF TOUCH.X < 32 THEN
          CODE$ = LEFT$(CODE$,CURSOR) + " " + RIGHT$(CODE$,LEN(CODE$) - CURSOR)
          INC CURSOR
        ELSE IF TOUCH.X < 48 THEN
          CODE$ = LEFT$(CODE$,CURSOR) + "                " + RIGHT$(CODE$,LEN(CODE$) - CURSOR)
          ADD CURSOR, 16
        ELSE IF TOUCH.X < 64 THEN
          IF CURSOR > 0 THEN
            CODE$ = LEFT$(CODE$,CURSOR-1) + RIGHT$(CODE$,LEN(CODE$) - CURSOR)
            DEC CURSOR
          END IF
        ELSE IF TOUCH.X > 72 AND TOUCH.X < 88 THEN
          ADD DELAY, -1
          IF DELAY = -1 THEN DELAY = 255
        ELSE IF TOUCH.X > 128 THEN
          ADD DELAY, 1
          IF DELAY = 256 THEN DELAY = 0
        END IF
        CALL CALCOFFSET
        CALL ADJUSTOFFSET
        CALL LOCATECURSOR
      END IF
     
    'UPPER BAR
    ELSE IF TOUCH.Y < 16 THEN
      ' RUN BUTTON
      IF TOUCH.X < 16 THEN
       SPRITE OFF 0
       CALL BRAINFRICK
       CALL LOCATECURSOR
       FILL $E000, 1600
       BG COPY 0,0,2,2 TO 0,0
      ELSE IF TOUCH.X > 144 THEN
       GOTO DISKMENU
      END IF
      
    'OUT PUT SWITCH
    ELSE IF TOUCH.X < 16 AND TOUCH.Y < 32 THEN
      ADD MODE, 1
      IF MODE = 2 THEN MODE = 0
      IF MODE = 0 THEN
        BG TINT 0,2 TO 1,2 PAL 7
        BG TINT 0,3 TO 1,3 PAL 4
      ELSE
        BG TINT 0,2 TO 1,2 PAL 4
        BG TINT 0,3 TO 1,3 PAL 7
      END IF
    
    'SCROLL ARROWS
    ELSE IF TOUCH.X > 144 THEN
      IF TOUCH.Y > 24 AND TOUCH.Y < 40 AND CODEOFFSET > 0 THEN
        DEC CODEOFFSET
        CALL ADJUSTCURSOR
        CALL LOCATECURSOR
    ELSE IF TOUCH.Y > 80 AND TOUCH.Y < 96 AND CODEOFFSET < MAXOFFSET THEN
        INC CODEOFFSET
        CALL ADJUSTCURSOR
        CALL LOCATECURSOR
      END IF
    END IF
  END IF
  
  'RELOCATES CURSOR TO WHERE THE USER TOUCHED
  IF TOUCH AND TOUCH.X > 16 AND TOUCH.Y > 24 AND TOUCH.X < 144 AND TOUCH.Y < 96 THEN
    X = TOUCH.X \ 8 - 2
    Y = TOUCH.Y \ 8 - 3 + CODEOFFSET
    POS = X + Y * 16
    IF POS <= LEN(CODE$) THEN 
     CURSOR = POS
    ELSE
     CURSOR = LEN(CODE$)
    END IF
    CALL LOCATECURSOR
  END IF
  PAL 0
  CLW
  PRINT MID$(CODE$, 16 * CODEOFFSET + 1, 143)
  WAIT VBL
LOOP

DISKMENU:
SPRITE OFF
BG SOURCE ROM(4)
BG COPY 0,0,20,16 TO 0,0
TEXT 0,0,"     DISK  MENU     "
CALL DRAWFILES
DO
  IF TOUCH.X < 144 AND TOUCH.Y > 15 AND TOUCH.Y < 96 AND CHOSENFILE <> (TOUCH.Y - 16) \ 8 + FILEOFFSET THEN
    CHOSENFILE = (TOUCH.Y - 16) \ 8 + FILEOFFSET
    CALL DRAWFILES
  ELSE IF TAP THEN
    'ARROWS ON THE RIGHT
    IF TOUCH.X > 144 AND TOUCH.Y < 96 THEN
      IF TOUCH.Y > 15 AND TOUCH.Y < 40 THEN
        FILEOFFSET = 0
        CALL DRAWFILES
      ELSE IF TOUCH.Y > 80 AND TOUCH.Y < 96 THEN
        FILEOFFSET = 6
        CALL DRAWFILES
      END IF
    
    'BOTTOM PANEL
    ELSE IF TOUCH.Y < 120 AND TOUCH.Y > 106 AND TOUCH.X > 7 AND TOUCH.X < 152 THEN
      'BACK BUTTON
      IF TOUCH.X < 24 THEN
       GOTO MAIN
      ELSE IF TOUCH.X > 136 THEN
       CALL SAVEF(CHOSENFILE)
       CALL DRAWFILES
       PAL 7
       BG FILL 0,0 TO 19,0 CHAR 2
       TEXT 0,0, "SAVED"
       WAIT 60
       GOTO MAIN
      ELSE IF TOUCH.X > 119 THEN
       CALL LOADF(CHOSENFILE)
       PAL 7
       BG FILL 0,0 TO 19,0 CHAR 2
       TEXT 0,0, "LOADED"
       WAIT 60
       GOTO MAIN
      END IF
    END IF
  END IF
  WAIT VBL
LOOP

'THE PROGRAM IS SENT AS A MEMORY ADRESS NOT ROM
SUB BRAINFRICK
 'USED TO AVOID PROGRAMS STOPPING INMEDIATLY
 CANEXIT = 0
 PAL 7
 BG COPY 12,14,2,2 TO 0,0
 PAL 4
 WAIT 1
 CLW
 CALL COMPILE
 POINTER = $E000
 
 DELAY = PEEK($A000)
 FOR COMMAND = 1 TO LEN(CODE$)
  CMD = PEEK($A000 + COMMAND)
  
  'EXECUTE COMMAND
  IF CMD = 1 THEN ADD POINTER, 1
  IF CMD = 2 THEN ADD POINTER, -1
  IF CMD = 3 THEN POKE POINTER, PEEK(POINTER) + 1
  IF CMD = 4 THEN POKE POINTER, PEEK(POINTER) - 1
  IF CMD = 5 THEN
   INPUT "INPUT NUMBER "; INP$
   KEYBOARD OFF
   POKE POINTER, VAL(INP$)
  END IF
  IF CMD = 6 THEN
    TRACE CHR$(PEEK(POINTER))
    IF MODE = 0 THEN PRINT PEEK(POINTER) ELSE PRINT CHR$(PEEK(POINTER));
  END IF
  IF CMD = 7  AND PEEK(POINTER) = 0 THEN CALL FINDNEXT(0)
  IF CMD = 8  AND PEEK(POINTER) <> 0 THEN CALL FINDNEXT(1)
  IF DELAY > 0 AND CMD > 0 THEN WAIT DELAY
  IF NOT TOUCH THEN CANEXIT = -1
  IF TOUCH AND TOUCH.X < 16 AND TOUCH.Y < 16 AND CANEXIT THEN EXIT SUB
 NEXT COMMAND
 DO
   IF TAP AND TOUCH.X < 16 AND TOUCH.Y < 16 THEN EXIT SUB
 LOOP
END SUB
 
'BRACK = 0 IS [
'BRACK = 1 IS ]
SUB FINDNEXT(BRACK)
 SKIPS = 0
 DO
  ADD COMMAND, BRACK * -2 + 1
  CMD = PEEK($A000 + COMMAND)
  'SOME WEIRD MATHS I CAME UP WITH ON THE SPOT
  IF CMD = 7 + BRACK + (BRACK * -2 + 1) THEN
   IF SKIPS = 0 THEN
    EXIT SUB
   ELSE
    ADD SKIPS, - 1
   END IF
  END IF
  IF CMD = 7 + BRACK THEN ADD SKIPS, 1
 LOOP
END SUB

SUB LOCATECURSOR
  Y = CURSOR \ 16 + 3 - CODEOFFSET
  X = CURSOR MOD 16 + 2
  SPRITE 0,X * 8, Y * 8, 1
  
  'THE THINGS THAT SHOW YOU WERE YOU ARE
  IF MAXOFFSET > 0 THEN
    SPRITE 1, 144, CODEOFFSET / (MAXOFFSET+ 9) * 37 + 40, 100
    SPRITE 2, 144, (CODEOFFSET + 9) / (MAXOFFSET+ 9) * 37 + 40, 100
  ELSE
    SPRITE OFF 1 TO 2
  END IF
END SUB

'BEWARE!: HERE LIES THE SPAGETTI CODE!
'CALCULATES THE MAXIMUM OFFSET FOR THE CODE
SUB CALCOFFSET
  OLDOFFSET = MAXOFFSET
  IF LEN(CODE$) < 144 THEN
    MAXOFFSET = 0
  ELSE
    MAXOFFSET = (LEN(CODE$) - 144) \ 16 + 1
  END IF
  IF OLDOFFSET = MAXOFFSET - 1 THEN INC CODEOFFSET
  IF CODEOFFSET > MAXOFFSET THEN CODEOFFSET = MAXOFFSET
END SUB

'ADJUSTS THE CURSOR WHEN THE USER SCROLLS UP AND DOWN SO IT DOESNT GO OUTSIDE THE WINDOW
SUB ADJUSTCURSOR
  LINE = CURSOR \ 16
  IF LINE < CODEOFFSET THEN ADD CURSOR, 16
  IF LINE > CODEOFFSET + 8 THEN ADD CURSOR, -16
END SUB

'ADJUSTS THE OFFSET WHEN THE CURSOR GOES OUTSIDE THE WINDOW
SUB ADJUSTOFFSET
  LINE = CURSOR \ 16
  IF LINE < CODEOFFSET THEN DEC CODEOFFSET
  IF LINE > CODEOFFSET + 8 THEN INC CODEOFFSET
END SUB

'I COPIED THIS FROM THE CHARACTER DESIGNER AND THEN EDITED IT
SUB DRAWFILES
  FOR I=0 TO 9
    N=I+FILEOFFSET
    IF N=CHOSENFILE THEN PAL 7 ELSE PAL 4
    NUMBER 0,2+I,N,2
    TEXT 2,2+I,":               "
    TEXT 3,2+I,LEFT$(FILE$(N),17)
  NEXT I
END SUB

'TURNS THE CONTENTS OF CODE$ INTO DATA AT MEMORY ADRESS $A000
SUB COMPILE
  POKE $A000, DELAY
  FOR I = 1 TO LEN(CODE$)
   'P      A      I   N
   CMD$ = MID$(CODE$, I, 1)
   IF CMD$ = " " THEN C = 0 ELSE IF CMD$ = ">" THEN C = 1 ELSE IF CMD$ = "<" THEN C = 2 ELSE IF CMD$ = "+" THEN C = 3 ELSE IF CMD$ = "-" THEN C = 4 ELSE IF CMD$ = "," THEN C = 5 ELSE IF CMD$ = "." THEN C = 6 ELSE IF CMD$ = "[" THEN C = 7 ELSE C = 8
   POKE $A000 + I, C
  NEXT I
END SUB

'DECOMPILES THE CODE LOADED TO WORKING RAM TO CODE$ VARIABLE
SUB DECOMPILE(LENGTH)
  DELAY = PEEK($A000)
  DIM CHARS$(9)
  CHARS$(0) = " "
  CHARS$(1) = ">"
  CHARS$(2) = "<"
  CHARS$(3) = "+"
  CHARS$(4) = "-"
  CHARS$(5) = ","
  CHARS$(6) = "."
  CHARS$(7) = "["
  CHARS$(8) = "]"
  CODE$ = ""
  FOR I = 1 TO LENGTH
   CODE$ = CODE$ + CHARS$(PEEK($A000 + I))
  NEXT I
END SUB

'LOADS FILE FROM DISK TO WORKING RAM
SUB LOADF(FILE)
  LOAD FILE, $A000
  CALL DECOMPILE(FSIZE(FILE))
END SUB

'SAVES THE PROGRAM IN $A000 TO GIVEN FILE
SUB SAVEF(FILE)
  CALL COMPILE
  IF FILE$(FILE) = "" THEN NAME$ = "BF" ELSE NAME$ = FILE$(FILE)
  SAVE FILE, NAME$, $A000, LEN(CODE$) + 1
END SUB

'ROM 4: ADDS TWO NUMBERS TOGETHER
'ROM 5: MULTIPLIES 2 NUMBERS TOGETHER
'ROM 6: DIVIDES FIRST MUMBER BY THE SECOND. MULTIPLICATIONS WITH NO REMAINDERS ONLY!!!!
#1:MAIN PALETTES
003F000000383400003C0C00003F3C00
003F2A15003F2A15003F2A15000F0500

#2:MAIN CHARACTERS
00000000000000000000000000000000
C0C0C0C0C0C0C0C00000000000000000
0000000000000000FFFFFFFFFFFFFFFF
FF80A1A2A2B98080007F7F7F7F7F7F7F
FE0111A9B929010101FFFFFFFFFFFFFF
FF8099B28BB28080007F7F7F7F7F7F7F
FE0129A9B991010101FFFFFFFFFFFFFF
FF80B3ABAAAB8080007F7F7F7F7F7F7F
FE01A92939B9010101FFFFFFFFFFFFFF
FF80808080809F8F007F7F7F7F7F7F7F
FE0101010101F9F101FFFFFFFFFFFFFF
FF80808080818387007F7F7F7F7F7F7F
FE0101010181C1E101FFFFFFFFFFFFFF
FF80808283838383007F7F7F7F7F7F7F
FE0101010181C1E101FFFFFFFFFFFFFF
00000000000000000000000000000000
00000000000000000000000000000000
0101010101010101FFFFFFFFFFFFFFFF
FF0000000000000000FFFFFFFFFFFFFF
808898BE9888807F7F7F7F7F7F7F7FFF
FDFDFDFDFD7D01FFFF8787B7B7FFFFFF
80888CBE8C88807F7F7F7F7F7F7F7FFF
FDFDFDFDFD7D01FFFF8787B7B7FFFFFF
808080808080807F7F7F7F7F7F7F7FFF
1D3D7D7D7D7D01FFFFE7C7C7C7FFFFFF
878381808080807F7F7F7F7F7F7F7FFF
E1C18101010101FFFFFFFFFFFFFFFFFF
8F9F80808080807F7F7F7F7F7F7F7FFF
F1F90101010101FFFFFFFFFFFFFFFFFF
838383838280807F7F7F7F7F7F7F7FFF
E1C18101010101FFFFFFFFFFFFFFFFFF
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000FFFFFFFFFFFFFFFFFF
80808080808080807F7F7F7F7F7F7F7F
FF8080808F8F8F8F007F7F7F7F7F7F7F
FE010101F1F1F1F101FFFFFFFFFFFFFF
FF80809F9F9F808000FFFFFFFFFFFFFF
FF0101F9F9F9393900FFFFFFFFFFFFFF
7F80868783818080807F7F7F7F7F7F7F
FF01010181C1E17100FFFFFFFFFFFFFF
FF8080808183878E00FFFFFFFFFFFFFF
FF0161E1C181010100FFFFFFFFFFFFFF
FF8080818181819F00FFFFFFFFFFFFFF
FF010181818181F900FFFFFFFFFFFFFF
FF8080808080809F00FFFFFFFFFFFFFF
FF010101010101F900FFFFFFFFFFFFFF
00000000000000000000000000000000
00000000000000000000000000000000
FF000000000000FF00FFFFFFFFFFFFFF
00000000000000000000000000000000
8F8F8F8F8080807F7F7F7F7F7F7F7FFF
F1F1F1F1010101FFFFFFFFFFFFFFFFFF
80889FBF9F8880FFFFFFFFFFFFFFFFFF
3939F9F9F90101FFFFFFFFFFFFFFFFFF
808081838786807F7F7F7F7F7F7F7FFF
71E1C181010101FFFFFFFFFFFFFFFFFF
8E878381808080FFFFFFFFFFFFFFFFFF
010181C1E16101FFFFFFFFFFFFFFFFFF
9F818181818080FFFFFFFFFFFFFFFFFF
F9818181810101FFFFFFFFFFFFFFFFFF
9F808080808080FFFFFFFFFFFFFFFFFF
F9010101010101FFFFFFFFFFFFFFFFFF
00000000000000000000000000000000
FF8080808080808100FFFFFFFFFFFFFF
FF0101010101018100FFFFFFFFFFFFFF
FF8080808080808100FFFFFFFFFFFFFF
FF0101010101018100FFFFFFFFFFFFFF
FF8087878686868600FFFFFFFFFFFFFF
FF01E1E10101010100FFFFFFFFFFFFFF
FF8087878080808000FFFFFFFFFFFFFF
FE01E1E16161616101FFFFFFFFFFFFFF
7F8080808080B0B0807F7F7F7F7F7F7F
FF01010101010D0D00FFFFFFFFFFFFFF
FF80808083878F9F00FFFFFFFFFCF8F1
FE010101F1F9F9F901FFFFFFFF0F0F4F
FF80808080818387007F7F7F7F7F7F7F
FE010141C1C1C1C101FFFFFFFFFFFFFF
FF80B1B2ABB28080007F7F7F7F7F7F7F
FE0119A1A199010101FFFFFFFFFFFFFF
81808080808080FFFFFFFFFFFFFFFFFF
81010101010101FFFFFFFFFFFFFFFFFF
81808180808080FFFFFFFFFFFFFFFFFF
81810101010101FFFFFFFFFFFFFFFFFF
86868686878780FFFFFFFFFFFFFFFFFF
01010101E1E101FFFFFFFFFFFFFFFFFF
80808080878780FFFFFFFFFFFFFFFFFF
61616161E1E101FEFFFFFFFFFFFFFFFF
B0BFBF808080807F7F7F7F7F7F7F7FFF
0DFDFD01010101FFFFFFFFFFFFFFFFFF
BF9F8F87838080FFE0F1F8FCFFFFFFFF
F9F9F9F9F10101FE8F4F0F0FFFFFFFFF
878381808080807F7F7F7F7F7F7F7FFF
C1C1C1C1410101FFFFFFFFFFFFFFFFFF
8898BFBF9888807F7F7F7F7F7F7F7FFF
0101C1C1010101FFFFFFFFFFFFFFFFFF
FF80B2AAAAB28080007F7F7F7F7F7F7F
FE01D59955D5010101FFFFFFFFFFFFFF
FF80B2AAAAAB807F007F7F7F7F7F7FFF
FE01B9B9A9A901FF01FFFFFFFFFFFFFF
FFFFFF0000000000FF80FF0000000000
FFFFFF0000000000FF01FF0000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
808080808080807F7F7F7F7F7F7F7FFF
FDFDFDFDFD7D01FFFF8787B7B7FFFFFF
FF80B9ABB8AB807F007F7F7F7F7F7FFF
FE01B921A13901FF01FFFFFFFFFFFFFF
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
00000000000000000000000000000000
0000000000000000FFFFFFFFFFFFFFFF
0018181818001800FFE7E7E7E7FFE7FF
006C6C2400000000FF9393DBFFFFFFFF
00247E24247E2400FFDB81DBDB81DBFF
00083E380E3E0800FFF7C1C7F1C1F7FF
0062640810264600FF9D9BF7EFD9B9FF
001C34386E643A00FFE3CBC7919BC5FF
0018183000000000FFE7E7CFFFFFFFFF
000C183030180C00FFF3E7CFCFE7F3FF
0030180C0C183000FFCFE7F3F3E7CFFF
000024187E182400FFFFDBE781E7DBFF
000018187E181800FFFFE7E781E7E7FF
0000000018183000FFFFFFFFE7E7CFFF
000000007E000000FFFFFFFF81FFFFFF
0000000000181800FFFFFFFFFFE7E7FF
00060C1830604000FFF9F3E7CF9FBFFF
003C666E76663C00FFC399918999C3FF
0018381818187E00FFE7C7E7E7E781FF
003C660C18307E00FFC399F3E7CF81FF
003C660C06663C00FFC399F3F999C3FF
0066667E06060600FF999981F9F9F9FF
007E607C06067C00FF819F83F9F983FF
001C307C66663C00FFE3CF839999C3FF
007E060C18303000FF81F9F3E7CFCFFF
003C663C66663C00FFC399C39999C3FF
003C663E06663C00FFC399C1F999C3FF
0000001800180000FFFFFFE7FFE7FFFF
0000001800183000FFFFFFE7FFE7CFFF
00000C1830180C00FFFFF3E7CFE7F3FF
0000007E007E0000FFFFFF81FF81FFFF
000030180C183000FFFFCFE7F3E7CFFF
003C660C18001800FFC399F3E7FFE7FF
003C666E6E603C00FFC39991919FC3FF
00183C667E666600FFE7C399819999FF
007C667C66667C00FF839983999983FF
003C666060663C00FFC3999F9F99C3FF
00786C66666C7800FF879399999387FF
007E607860607E00FF819F879F9F81FF
007E607860606000FF819F879F9F9FFF
003C606E66663C00FFC39F919999C3FF
0066667E66666600FF999981999999FF
003C181818183C00FFC3E7E7E7E7C3FF
001E060606663C00FFE1F9F9F999C3FF
00666C78786C6600FF999387879399FF
0060606060607E00FF9F9F9F9F9F81FF
0042667E7E666600FFBD9981819999FF
0066767E6E666600FF998981919999FF
003C666666663C00FFC399999999C3FF
007C667C60606000FF8399839F9F9FFF
003C66666A6C3E00FFC399999593C1FF
007C667C786C6600FF839983879399FF
003E603C06067C00FFC19FC3F9F983FF
007E181818181800FF81E7E7E7E7E7FF
0066666666663C00FF9999999999C3FF
00666666663C1800FF99999999C3E7FF
0066667E7E664200FF9999818199BDFF
00663C183C666600FF99C3E7C39999FF
0066663C18181800FF9999C3E7E7E7FF
007E0C1830607E00FF81F3E7CF9F81FF
003C303030303C00FFC3CFCFCFCFC3FF
006030180C060200FF9FCFE7F3F9FDFF
003C0C0C0C0C3C00FFC3F3F3F3F3C3FF
00183C6600000000FFE7C399FFFFFFFF
0000000000007E00FFFFFFFFFFFF81FF

#3:MAIN BG
000014100D040E040207020702070207
02070207020702070207020702070207
0207020702070207600461041D041E04
02040204020402040204020402040204
02040204020402040204020402040204
70047104620763072104210421042104
21042104210421042104210421042104
21042104210421040204020472047304
00000000000000000000000000000000
00000000000000000000000000000000
0B040C04020411040000000000000000
00000000000000000000000000000000
00000000000000001B041C0402041104
00000000000000000000000000000000
00000000000000000000000000000000
22040204020411040000000000000000
00000000000000000000000000000000
00000000000000002204020402041104
00000000000000000000000000000000
00000000000000000000000000000000
22040204020411040000000000000000
00000000000000000000000000000000
00000000000000002204020402041104
00000000000000000000000000000000
00000000000000000000000000000000
22040204020411040000000000000000
00000000000000000000000000000000
000000000000000009040A0402041104
00000000000000000000000000000000
00000000000000000000000000000000
19041A04020402042704280429042A04
2B042C042D042E044204430440044104
44044504460447040204020402040204
3704380439043A043B043C043D043E04
52045304500451045404550456045704
02040204020402044804490425042604
4A044B0402044C044D04020723072407
020702070D040E040204020402040204
58045904350436045A045B0421045C04
5D04020733073407020702071D041E04
02040204

#4:DISK MENU
00001410020702070207020702070207
02070207020702070207020702070207
02070207020702070207020731043104
31043104310431043104310431043104
31043104310431043104310431043104
31043104020402040204020402040204
02040204020402040204020402040204
02040204020402040B040C0402040204
02040204020402040204020402040204
02040204020402040204020402040204
1B041C04020402040204020402040204
02040204020402040204020402040204
02040204020402042204020402040204
02040204020402040204020402040204
02040204020402040204020402040204
22040204020402040204020402040204
02040204020402040204020402040204
02040204020402042204020402040204
02040204020402040204020402040204
02040204020402040204020402040204
22040204020402040204020402040204
02040204020402040204020402040204
02040204020402042204020402040204
02040204020402040204020402040204
02040204020402040204020402040204
22040204020402040204020402040204
02040204020402040204020402040204
020402040204020409040A0402040204
02040204020402040204020402040204
02040204020402040204020402040204
19041A04120431043104310431043104
31043104310431043104310431043104
31043104310431043104120411044E04
4F040204020402040204020402040204
02040204020402040204030404040504
0604220411045E045F04020402040204
02040204020402040204020402040204
02041304140415041604220402041204
12041204120412041204120412041204
12041204120412041204120412041204
12040204

#5:ADDITION
000501050702030104080206

#6:MULTIPLICATION
00050105020701070401030103020208
01010704020203010108020202040801
0106

#7:DIVISION
00050105020701070401030103020208
01010704020203010108020704020204
01010801010103020202020208010704
08010101010704020202020203010101
0101080202020202060000

#8:HELLO, WORLD!
00010303030303030303000000000000
00070203030303030303030301040800
00020601030303030000000000000000
00070203030303030303010408000000
00020306000000000000000000000000
00030303030303030606000000000000
00030303060000000000000000000000
00010103030303030300000000000000
00070203030303030303010408020303
06040404040404040404040404060000
00010303030303030702030303030303
03030301040802030600000000000000
00020603030306000000000000000000
00040404040404060000000000000000
00040404040404040406000000000000
00010101030303030000000000000000
00070203030303030303030104080203
06

#9:FIBONACCI
00030103010101030303030303030303
00070000000000000000000000000000
00000202020200000000000000000000
00000007010103020204080000000000
00000100000000000000000000000000
00000007020301040800000000000000
00000100000000000000000000000000
00000007020301010302040800000000
00000100000000000000000000000000
00000007020301040800000000000000
00000206010104000000000000000000
0008

