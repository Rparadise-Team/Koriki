#!/bin/sh

export LOCK_FILE="/var/lock/_resize_partition"
export TMP_PATH="/tmp/fatresize"
export TMP_LIB="/tmp/fatresize/lib"

# Function to kill processes that might block the partition
task_killer() {
    r=0
    for p in $1; do
        if [ -d "/proc/$p" ] && [ $p -ne $$ ]; then
            kill $2 $p
            r=1
        fi
    done
    return $r
}

# Attempt to kill processes that are using the partition
kill_hooked_tasks() {
    c=0
    while [ $c -lt 5 ]; do
        pids=$(fuser -m /mnt/SDCARD 2>/dev/null)
        if task_killer "$pids" $1; then
            return
        fi
        sleep 0.05
        c=$((c + 1))
    done
}

# Check if the script is already running
if [ "$0" = "/tmp/_resize_partition" ]; then
    if [ ! -f "$LOCK_FILE" ]; then
        touch "$LOCK_FILE"
    else
        echo "resize_partition is already running."
        exit 1
    fi

    # Kill processes that could be blocking the SD
    echo "Terminating processes that are blocking the partition..."
    killall -9 updater 2>/dev/null
    sleep 1
    kill_hooked_tasks
    sleep 0.1
    kill_hooked_tasks -9

    sync

    # Unmount the partition and disable swap
    echo "Unmounting the partition..."
    swapoff /mnt/SDCARD/cachefile 2>/dev/null
    umount -r /mnt/SDCARD 2>/dev/null
    umount /mnt/SDCARD 2>/dev/null

    # Prepare the environment for running fatresize
    echo "Preparing environment for fatresize..."
    export LD_LIBRARY_PATH=$TMP_LIB:/lib:/config/lib:/customer/lib:$LD_LIBRARY_PATH

    # Ensure that the fatresize binary is executable
    chmod +x $TMP_PATH
	
	$TMP_PATH/show $TMP_PATH/resize.png
	
	sleep 5

    # Show partition information before resizing
    echo "Partition information before resizing:"
	
    $TMP_PATH/fdisk -l /dev/mmcblk0
	
	# Extract size in GiB from fdisk and convert to KiB
	
    TOTAL_GIB=$($TMP_PATH/fdisk -l /dev/mmcblk0 | grep "Disk /dev/mmcblk0" | awk '{print $3}')
    TOTAL_KIB=$(awk "BEGIN {printf \"%d\", ( $TOTAL_GIB * 1024 * 1024 ) - 2}")

    echo "Total size: $TOTAL_GIB GiB"
    echo "Converted size: $TOTAL_KIB KiB"
	
	$TMP_PATH/fatresize -f -v -s ${TOTAL_KIB}ki /dev/mmcblk0p1
	
	$TMP_PATH/fsck.fat -a -v /dev/mmcblk0p1
	
	$TMP_PATH/parted /dev/mmcblk0 --script resizepart 1 100%

    # Check if the resize was successful
    if [ $? -ne 0 ]; then
        echo "Error resizing the partition."
        sync
		/customer/main
        exit 1
    fi

    # Run partprobe to force partition table reload
    echo "Forcing partition table reload with partprobe..."
	
    $TMP_PATH/partprobe /dev/mmcblk0

    # Fix FAT32 header RAW in windows
    echo -n -e \\xEB\\x58\\x90 > /dev/mmcblk0p1
    sync
	
	$TMP_PATH/fsck.fat -a -v /dev/mmcblk0p1

    # Remount the partition using system's mount command
    echo "Remounting the partition..."
    mount /dev/mmcblk0p1 /mnt/SDCARD

    # Show partition information after resizing
    echo "Partition information after resizing:"
    $TMP_PATH/fdisk -l /dev/mmcblk0

    # Create a file indicating that the resize has been completed
    touch /mnt/SDCARD/resized

    # Sync changes before rebooting
    sync

    echo "Unmounting the partition..."
    umount -r /mnt/SDCARD
    umount /mnt/SDCARD

    sync

    echo "Resizing completed. Rebooting the system..."
	if [ ! -f "/customer/app/axp_test" ]; then
    	reboot
	else
		poweroff
	fi
fi

# Check if the script is copied to /tmp, if not, copy it
if [ ! -f /tmp/_resize_partition ]; then
    cp -f "$0" /tmp/_resize_partition
fi

# Run the script independently in the background
pgrep -f /tmp/_resize_partition || (
    set -m
    su root -c "/usr/bin/nohup /tmp/_resize_partition $1 </dev/null >/dev/null 2>&1 &"
)

# Wait to prevent the main script from closing immediately
while true; do
    sleep 10
done
