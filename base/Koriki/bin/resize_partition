#!/bin/sh

# Enable debugging to see each command executed
set -x

# Redirect stdout and stderr to a log file in /appconfigs
if [ -f /appconfigs/resize_partition.log ]; then
    rm /appconfigs/resize_partition.log
fi

exec > /appconfigs/resize_partition.log 2>&1

export LOCK_FILE="/var/lock/_resize"
export TMP_PATH="/tmp/fatresize"
export TMP_LIB="/tmp/fatresize/lib"

# Function to kill processes that might block the partition
task_killer() {
    r=0
    for p in $1; do
        if [ -d "/proc/$p" ] && [ $p -ne $$ ]; then
            kill $2 $p
            r=1
        fi
    done
    return $r
}

# Attempt to kill processes that are using the partition
kill_hooked_tasks() {
    c=0
    while [ $c -lt 5 ]; do
        pids=$(fuser -m /mnt/SDCARD 2>/dev/null)
        if task_killer "$pids" $1; then
            return
        fi
        sleep 0.05
        c=$((c + 1))
    done
}

# Check if the script is already running
if [ "$0" = "/tmp/_resize_partition" ]; then
    if [ ! -f "$LOCK_FILE" ]; then
        touch "$LOCK_FILE"
    else
        echo "resize_partition is already running."
        exit 1
    fi

    # Kill processes that could be blocking the SD
    echo "Terminating processes that are blocking the partition..."
    killall -9 updater 2>/dev/null
    sleep 1
    kill_hooked_tasks
    sleep 0.1
    kill_hooked_tasks -9

    sync

    # Unmount the partition and disable swap
    echo "Unmounting the partition..."
    swapoff /mnt/SDCARD/cachefile 2>/dev/null
    umount -r /mnt/SDCARD 2>/dev/null
    umount /mnt/SDCARD 2>/dev/null

    # Prepare the environment for running fatresize
    echo "Preparing environment for fatresize..."
    export LD_LIBRARY_PATH=$TMP_LIB:/lib:/config/lib:/customer/lib:$LD_LIBRARY_PATH

    $TMP_PATH/show $TMP_PATH/resize.png

    # Ensure that the fatresize binary is executable
    chmod +x $TMP_PATH/fatresize

    # Show partition information before resizing
    echo "Partition information before resizing:"
    fdisk -l /dev/mmcblk0

    # Calculate the maximum safe size for the partition
    echo "Calculating the maximum safe size for the partition..."

    # Get the total size of the device in sectors
    TOTAL_SECTORS=$(cat /sys/block/mmcblk0/size)
    SECTOR_SIZE=512  # Sector size in bytes

    # Calculate the total size in bytes
    TOTAL_BYTES=$((TOTAL_SECTORS * SECTOR_SIZE))

    # Get the starting sector of the partition
    PART_START=$(cat /sys/block/mmcblk0/mmcblk0p1/start)

    # Calculate the available sectors for the partition
    AVAILABLE_SECTORS=$((TOTAL_SECTORS - PART_START))

    # Calculate the maximum size for the partition in bytes
    MAX_PART_SIZE_BYTES=$((AVAILABLE_SECTORS * SECTOR_SIZE))

    # Convert to megabytes (1 MB = 1,048,576 bytes)
    MAX_PART_SIZE_MB=$((MAX_PART_SIZE_BYTES / 1048576))

    # Subtract a safety margin (e.g., 100 MB)
    SAFE_PART_SIZE_MB=$((MAX_PART_SIZE_MB - 100))

    echo "Total device size: $((TOTAL_BYTES / 1048576)) MB"
    echo "Maximum partition size: ${MAX_PART_SIZE_MB} MB"
    echo "Resizing the partition to: ${SAFE_PART_SIZE_MB} MB"

    # Run fatresize with the adjusted size
    echo "Resizing the FAT32 partition..."
    $TMP_PATH/fatresize -f -v -s ${SAFE_PART_SIZE_MB}M /dev/mmcblk0p1

    # Check if fatresize was successful
    if [ $? -ne 0 ]; then
        echo "Error resizing the partition with fatresize."
        # Remount the partition before exiting
        mount /dev/mmcblk0p1 /mnt/SDCARD
        sync
        exit 1
    fi

    # Remount the partition
    echo "Remounting the partition..."
    mount /dev/mmcblk0p1 /mnt/SDCARD

    # Show partition information after resizing
    echo "Partition information after resizing:"
    fdisk -l /dev/mmcblk0

    # Create a file indicating that the resize has been completed
    touch /mnt/SDCARD/resized

    # Sync changes before rebooting
    sync

    echo "Resizing completed. Rebooting the system..."
    reboot
fi

# Check if the script is copied to /tmp, if not, copy it
if [ ! -f /tmp/_resize_partition ]; then
    cp -f "$0" /tmp/_resize_partition
fi

# Run the script independently in the background
pgrep -f /tmp/_resize_partition || (
    set -m
    su root -c "/usr/bin/nohup /tmp/_resize_partition $1 </dev/null >/dev/null 2>&1 &"
)

# Wait to prevent the main script from closing immediately
while true; do
    sleep 10
done
