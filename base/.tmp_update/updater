#!/bin/sh

export SCREEN_WIDTH=640
export SCREEN_HEIGHT=480
export SDCARD_PATH=/mnt/SDCARD
export HOME=${SDCARD_PATH}
SETTINGS_INT_FILE="/appconfigs/system.json"
SETTINGS_EXT_FILE="/mnt/SDCARD/system.json"

export SYSTEM_PATH=${SDCARD_PATH}/Koriki
export CUSTOMER_DIR=/customer

export LD_LIBRARY_PATH="${SYSTEM_PATH}/lib/sdl2.0:${SYSTEM_PATH}/lib:${LD_LIBRARY_PATH}"
export PATH="${SYSTEM_PATH}/bin:${PATH}"

export SWAPFILE=/mnt/SDCARD/cachefile
export CPUSAVE=/mnt/SDCARD/.simplemenu/cpu.sav
export GOVSAVE=/mnt/SDCARD/.simplemenu/governor.sav

export RETROARCH_PATH=/mnt/SDCARD/RetroArch

# Detect flash type
if dmesg|fgrep -q "[FSP] Flash is detected (0x1100, 0x68, 0x40, 0x18) ver1.1"; then
	export SETTINGS_FILE=$SETTINGS_EXT_FILE
else
	if [ -f /appconfigs/system.json.old ]; then
    	export SETTINGS_FILE=$SETTINGS_EXT_FILE
	else
    	export SETTINGS_FILE=$SETTINGS_INT_FILE
	fi
fi

# Detect model and init charger GPIO
if [ ! -f /customer/app/axp_test ]; then
	export MODEL="MM"
	if [ ! -f /sys/devices/gpiochip0/gpio/gpio59/direction ]; then
		echo 59 > /sys/class/gpio/export
		echo in > /sys/devices/gpiochip0/gpio/gpio59/direction
	fi
else
	export MODEL="MMP"
fi

killprocess() {
	pid=`ps | grep $1 | grep -v grep | cut -d' ' -f3`
	kill -9 $pid
}

init_lcd() {
	cat /proc/ls
	if [ $1 -ne 0 ] ; then
		sleep $1
	fi 
}

runifnecessary() {
	a=`ps | grep $1 | grep -v grep`
	if [ "$a" == "" ] ; then
		$2 &
	fi
}

reset_settings() {
	if [ -f ${SDCARD_PATH}/.reset_settings ]; then
		if [ $MODEL == "MM" ]; then
		    if [ -f /appconfigs/system.json.old ]; then
			cp ${SYSTEM_PATH}/assets/system-v4.json $SETTINGS_FILE
			else
			cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
			fi
			cp ${SYSTEM_PATH}/assets/last_state.sav ${SDCARD_PATH}/.simplemenu/last_state.sav
			rm ${SDCARD_PATH}/.reset_settings
			sync
			reboot
			sleep 5
		else
			cp ${SYSTEM_PATH}/assets/system.mmp.json $SETTINGS_FILE
			cp ${SYSTEM_PATH}/assets/last_state.sav ${SDCARD_PATH}/.simplemenu/last_state.sav
			rm ${SDCARD_PATH}/.reset_settings
			sync
			poweroff
			sleep 5
		fi
	fi
}

update() {
	if [ -f ${SDCARD_PATH}/.deletes ]; then
		while read file_to_delete; do
		rm -rf "${file_to_delete}"
		done < ${SDCARD_PATH}/.deletes
		rm ${SDCARD_PATH}/.deletes
	fi

	if [ -f ${SDCARD_PATH}/update_koriki_*.zip ]; then
		for file in `ls ${SDCARD_PATH}/update_koriki_*.zip`; do
		unzip -q -o ${file} .update_splash.png -d ${SDCARD_PATH}
		sync
		show ${SDCARD_PATH}/.update_splash.png

		unzip -q -o ${file} .deletes -d ${SDCARD_PATH}
		if [ -f ${SDCARD_PATH}/.deletes ]; then
			while read file_to_delete; do
			if [ -f "${file_to_delete}" ]; then
				rm "${file_to_delete}"
			elif [ -d "${file_to_delete}" ]; then
				rm -rf "${file_to_delete}"
			fi
			done < ${SDCARD_PATH}/.deletes
		fi

		unzip -q -o ${file} -d ${SDCARD_PATH}

		rm ${file}
		if [ -f ${SDCARD_PATH}/.deletes ]; then
			rm ${SDCARD_PATH}/.deletes
		fi
		sleep 5s
		done
		sync
		if [ $MODEL == "MMP" ]; then
			reboot
			sleep 10s
		fi
	fi

	if [ -f ${SDCARD_PATH}/.update_splash.png ]; then
		rm ${SDCARD_PATH}/.update_splash.png
	fi
}

dir_scaffolding() {
	## Quake fbl's by @neilswann80
	pak="exec=pak0.pak"
	for dir2 in QUAKE/id1 QUAKE/hipnotic QUAKE/rogue QUAKE/dopa; do
		dir="/mnt/SDCARD/Roms/${dir2}"
		count=`ls -1 ${dir}/*.fbl 2>/dev/null | wc -l`
		if [ $count -eq 0 ] && [ -e "${dir}/pak0.pak" ]; then
			case ${dir2} in
				QUAKE/id1)      echo "$pak" > "${dir}/Quake.fbl" ;;
				QUAKE/hipnotic) echo "$pak" > "${dir}/Mission pack 1.fbl" ;;
				QUAKE/rogue)    echo "$pak" > "${dir}/Mission pack 2.fbl" ;;
				QUAKE/dopa)     echo "$pak" > "${dir}/Episode 5. Dimension of the Past.fbl" ;;
			esac
		fi
		done
}

# set virtual memory size
echo 4096 > /proc/sys/vm/max_map_count

# Init_lcd
init_lcd 1

# Init backlight
echo 0 > /sys/class/pwm/pwmchip0/export
echo 800 > /sys/class/pwm/pwmchip0/pwm0/period
echo 70 > /sys/class/pwm/pwmchip0/pwm0/duty_cycle
echo 1 > /sys/class/pwm/pwmchip0/pwm0/enable

# Charging screen
${SYSTEM_PATH}/bin/charging

# Update opportunity
update

# Get save volumen
/customer/app/tinymix set 6 100
vol=`/customer/app/jsonval vol`

if [ "$vol" -ge "20" ]; then
    sed -i 's/"vol":\s*\([2][123]\)/"vol": 20/' $SETTINGS_FILE
	sync
	vol=`/customer/app/jsonval vol`
fi

vol=`expr 40 + 60 \* $vol \/ 20`
/customer/app/tinymix set 6 $vol

# Show bootScreen or videosplash
if [ -f ${SYSTEM_PATH}/videosplash.mp4 ]; then
    echo 0 > /sys/module/gpio_keys_polled/parameters/button_enable
	${SYSTEM_PATH}/bin/ffplayer ${SYSTEM_PATH}/videosplash.mp4
	echo 1 > /sys/module/gpio_keys_polled/parameters/button_enable
else
	${SYSTEM_PATH}/bin/show ${SDCARD_PATH}/.simplemenu/resources/loading.png
fi

# check swap size
if [ -f ${SWAPFILE} ]; then
SWAPSIZE=`stat -c %s "${SWAPFILE}"`

MINSIZE=$((256 * 1024 * 1024))

if [ "$SWAPSIZE" -lt "$MINSIZE" ]; then
	rm ${SWAPFILE}
fi
fi

# Enable swap
if [ ! -f ${SWAPFILE} ]; then
	show ${SYSTEM_PATH}/images/swap.png
	dd if=/dev/zero of=${SWAPFILE} bs=1M count=256
	mkswap ${SWAPFILE}
	sync
fi
swapon -p 50 ${SWAPFILE}

# Reset settings on first boot
reset_settings

# Create ROMs scaffolding
dir_scaffolding

# Create v3 config file is this is not found in the root of SDCARD
if dmesg|fgrep -q "[FSP] Flash is detected (0x1100, 0x68, 0x40, 0x18) ver1.1"; then
	FILESIZE=`stat -c %s "${SETTINGS_FILE}"`
	if [ "$FILESIZE" -eq 0 ]; then
		rm $SETTINGS_FILE
		cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
		sync
		reboot
		sleep 5
	fi
	if [ ! -f $SETTINGS_FILE ]; then
		cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
		sync
		reboot
		sleep 5
	fi
fi

# Create v4 config file is this is not found in the root of SDCARD
if [ -f /appconfigs/system.json.old ]; then
	FILESIZE=`stat -c %s "${SETTINGS_FILE}"`
	if [ "$FILESIZE" -eq 0 ]; then
		rm $SETTINGS_FILE
		cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
		sync
		reboot
		sleep 5
	fi
	if [ ! -f $SETTINGS_FILE ]; then
		cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
		sync
		reboot
		sleep 5
	fi
fi

# fix if the settings files is missing
if [ ! -f $SETTINGS_FILE ]; then
	if [ $MODEL == "MMP" ]; then
		cp ${SYSTEM_PATH}/assets/system.mmp.json $SETTINGS_FILE
		sync
		reboot
		sleep 5
	fi
	if [ $MODEL == "MM" ]; then
		cp ${SYSTEM_PATH}/assets/system.json $SETTINGS_FILE
		sync
		reboot
		sleep 5
	fi
fi

# Latency reduction audioserver by Eggs
# NOTE: could cause performance issues on more demanding cores...maybe?
runsvr=`/customer/app/jsonval audiofix`

if [ "$runsvr" != "0" ] ; then
	/mnt/SDCARD/Koriki/bin/audioserver &
	if [ $MODEL == "MMP" ]; then
		touch /tmp/audioserver_on
		sync
	fi
fi

if [ -f /customer/lib/libpadsp.so ]; then
    export LD_PRELOAD=/customer/lib/libpadsp.so
fi

# free memory when audioserver is stoped
if [ "$runsvr" == "0" ] ; then
	if [ $MODEL == "MMP" ]; then
		if [ -f /tmp/audioserver_on ]; then
			/mnt/SDCARD/Koriki/bin/freemma #freemma from Onion OS
			rm /tmp/audioserver_on
		fi
	fi
fi

# check if wifi value is 1
if [ $MODEL == "MMP" ]; then
    runwifi=`/customer/app/jsonval wifi`
	
	if [ "$runwifi" == "1" ]; then
	sed -i "s/\"wifi\":\s*[01]/\"wifi\": 0/" $SETTINGS_FILE
	/customer/app/axp_test wifioff
	sync
	fi
	
fi     

# autochange retroarch version and show/quit wifi app

if [ ! -f /customer/app/axp_test ]; then
	rm ${RETROARCH_PATH}/retroarch
	cp ${RETROARCH_PATH}/retroarch.mini ${RETROARCH_PATH}/retroarch
	sync
	if [ -f ${SDCARD_PATH}/.simplemenu/apps/Wifi.sh ]; then
		mv ${SDCARD_PATH}/.simplemenu/apps/Wifi.sh ${SDCARD_PATH}/.simplemenu/apps/Wifi
		sync
	fi
	if [ -f ${SDCARD_PATH}/.simplemenu/apps/Ftp.sh ]; then
		mv ${SDCARD_PATH}/.simplemenu/apps/Ftp.sh ${SDCARD_PATH}/.simplemenu/apps/Ftp
		sync
	fi
else
	rm ${RETROARCH_PATH}/retroarch
	cp ${RETROARCH_PATH}/retroarch.plus ${RETROARCH_PATH}/retroarch
	sync
	if [ -f ${SDCARD_PATH}/.simplemenu/apps/Wifi ]; then
		mv ${SDCARD_PATH}/.simplemenu/apps/Wifi ${SDCARD_PATH}/.simplemenu/apps/Wifi.sh
		sync
	fi
	if [ -f ${SDCARD_PATH}/.simplemenu/apps/Ftp ]; then
		mv ${SDCARD_PATH}/.simplemenu/apps/Ftp ${SDCARD_PATH}/.simplemenu/apps/Ftp.sh
		sync
	fi
fi

# Set the last CPU and GOV change
if [ -f ${CPUSAVE} ]; then
	CPU=`cat "${CPUSAVE}"`
	echo ${CPU} > /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
fi
if [ ! -f ${CPUSAVE} ]; then
	touch ${CPUSAVE}
	echo 1200000 > ${CPUSAVE}
	sync
fi
if [ -f ${GOVSAVE} ]; then
	echo ondemand > ${GOVSAVE}
	sync
fi
if [ ! -f ${GOVSAVE} ]; then
	touch ${GOVSAVE}
	echo ondemand > ${GOVSAVE}
	sync
fi

# Koriki keymon
runifnecessary "keymon" ${SYSTEM_PATH}/bin/keymon

# Koriki batmon (compiled and adapter from onion)
${SYSTEM_PATH}/bin/batmon &

# create dhcp.leases
if [ ! -f /appconfigs/dhcp.leases ]; then
	touch /appconfigs/dhcp.leases
	sync
fi

# fix simplemenu bootloop
if [ ! -f ${SDCARD_PATH}/.simplemenu/favorites.sav ]; then
	touch ${SDCARD_PATH}/.simplemenu/favorites.sav
	sync
fi

# clear ftp log file
if [ -f ${SYSTEM_PATH}/bftpdutmp ]; then
	rm ${SYSTEM_PATH}/bftpdutmp
	touch ${SYSTEM_PATH}/bftpdutmp
	sync
fi

# Detect 'B' press to fix SM boot loops
if cat /sys/kernel/debug/gpio|grep "gpio-6 "|grep lo > /dev/null 2>&1
then
	rm  ${SDCARD_PATH}/.simplemenu/last_state.sav
	sync
fi

# Detect if wifi app was the last app and erese this from SM if is the model MM.
if [ $MODEL == "MM" ]; then
    sed -i 's/^1;0;0;15;15\([^;]*;[^;]*\)$/1;0;0;13;13\1/g' ${SDCARD_PATH}/.simplemenu/last_state.sav
	sed -i 's/^1;0;0;14;14\([^;]*;[^;]*\)$/1;0;0;13;13\1/g' ${SDCARD_PATH}/.simplemenu/last_state.sav
    sed -i 's/^1;1;0;15;15\([^;]*;[^;]*\)$/1;1;0;13;13\1/g' ${SDCARD_PATH}/.simplemenu/last_state.sav
	sed -i 's/^1;1;0;14;14\([^;]*;[^;]*\)$/1;1;0;13;13\1/g' ${SDCARD_PATH}/.simplemenu/last_state.sav
	sed -i 's/^1;2;0;15;15\([^;]*;[^;]*\)$/1;2;0;13;13\1/g' ${SDCARD_PATH}/.simplemenu/last_state.sav
	sed -i 's/^1;2;0;14;14\([^;]*;[^;]*\)$/1;2;0;13;13\1/g' ${SDCARD_PATH}/.simplemenu/last_state.sav
	sync
fi

# Set timezone
if [ -f ${SDCARD_PATH}/App/Clock/timezone.txt ]; then
    timezone=`cat "${SDCARD_PATH}"/App/Clock/timezone.txt`
	export TZ=UTC$((-1*timezone))
else
    touch ${SDCARD_PATH}/App/Clock/timezone.txt
	echo +0 > ${SDCARD_PATH}/App/Clock/timezone.txt
	export TZ=UTC+0
fi

# Launch SimpleMenu
while [ 1 ]; do
	HOME=${SDCARD_PATH}
	cd ${SDCARD_PATH}/.simplemenu
	./simplemenu
	sleep 4s
done

# turf off the console.
if [ ! -f /customer/app/axp_test ]; then
	sync
	sleep 5
	reboot
else
	sync
	sleep 5
	poweroff
fi
